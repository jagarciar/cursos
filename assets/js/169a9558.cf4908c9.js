"use strict";(self.webpackChunkcursos=self.webpackChunkcursos||[]).push([[2993],{8885:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"composicion-reductores","metadata":{"permalink":"/cursos/blog/composicion-reductores","source":"@site/blog/2025-05-18-Composicion-reducers.md","title":"Composici\xf3n de reductores","description":"Cuando se desea dividir la l\xf3gica para el manejo de datos en un aplicativo ReactJS que hace uso de Redux, se debe usar la composici\xf3n de reductores en lugar de muchos stores.","date":"2025-05-18T00:00:00.000Z","tags":[{"inline":false,"label":"React","permalink":"/cursos/blog/tags/about-react","description":"Tutoriales donde se menciona la palabra react"},{"inline":false,"label":"React JS","permalink":"/cursos/blog/tags/about-react-js","description":"Tutoriales donde se menciona la palabra reactjs"},{"inline":false,"label":"createRoot","permalink":"/cursos/blog/tags/about-createRoot","description":"Tutoriales donde se menciona la palabra createRoot"},{"inline":false,"label":"NPM","permalink":"/cursos/blog/tags/about-npm","description":"Tutoriales donde se menciona la palabra npm"},{"inline":false,"label":"Vite","permalink":"/cursos/blog/tags/about-vite","description":"Tutoriales donde se menciona la palabra vite"},{"inline":false,"label":"Redux","permalink":"/cursos/blog/tags/about-redux","description":"Tutoriales donde se menciona la palabra redux"},{"inline":false,"label":"Estado","permalink":"/cursos/blog/tags/about-estado","description":"Tutoriales donde se menciona la palabra estado"},{"inline":false,"label":"flux","permalink":"/cursos/blog/tags/about-flux","description":"Tutoriales donde se menciona la palabra flux"}],"readingTime":2.025,"hasTruncateMarker":true,"authors":[{"name":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","title":"Ing. de Sistemas","url":"https://github.com/jagarciar","page":null,"socials":{"github":"https://github.com/jagarciar"},"imageURL":"https://github.com/jagarciar.png","key":"jeogarod"}],"frontMatter":{"title":"Composici\xf3n de reductores","description":"Cuando se desea dividir la l\xf3gica para el manejo de datos en un aplicativo ReactJS que hace uso de Redux, se debe usar la composici\xf3n de reductores en lugar de muchos stores.","slug":"composicion-reductores","authors":["jeogarod"],"tags":["react","reactjs","createRoot","npm","vite","redux","estado","flux"],"hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"Arquitectura de datos Flux","permalink":"/cursos/blog/2025/05/18/Flux"}},"content":"Antes de leer este blog es necesario e indispensable que conozcas t\xe9rminos, conceptos y lineamientos como [**Redux**](/docs/programacion/reactjs/frameworks/redux.md) que estan basados en la implementaci\xf3n de la arquitectura [**Flux**](/blog/2025-05-18-Flux.md). \\n\\nRecordemos que [**Redux**](/docs/programacion/reactjs/frameworks/redux.md) esta compuesto de cuatro artefactos principales : las **vistas** que ejecutan las **acciones** a trav\xe9s de los **reductores** que pueden crear, consultar, actualizar o eliminar datos definidos en el modelo y gestionados por el **almac\xe9n**. \\n\\nSeg\xfan la necesidad del negocio, una aplicaci\xf3n puede tener m\xe1s de una entidad en el modelo de datos. Por ejemplo, si nuestra aplicaci\xf3n trata de un sistema autogestionable de productos adquiridos por un cliente en una compa\xf1\xeda, por lo menos, las entidades cliente y productos deber\xedan existir en el modelo de datos. \\n\\n\x3c!-- truncate --\x3e\\n\\n```javascript\\nconst initialState = {\\n    cliente:{\\n        id:0,\\n        name:\\"Jeyson\\",\\n        age:33,\\n        email:\\"jeogarod@gmail.com\\"\\n    },\\n    productos:[\\n        {\\n            id:0,\\n            name:\\"Salt\\",\\n            value:$300\\n        }\\n    ]\\n}\\n```\\n\\nDespu\xe9s de definir el modelo de datos, debemos definir el reducer o reductor. Tengamos presente que el reducer es una funci\xf3n JavaScript que recibe el estado actual y una acci\xf3n y retorna un nuevo estado.\\n\\nSupongamos que nuestro aplicativo tiene las siguientes capacidades,  funciones o **tipos de acciones**. \\n\\n1. Registrar cliente\\n2. Seleccionar producto\\n3. De-seleccionar producto\\n4. Modificar cliente\\n5. Eliminar cliente\\n6. Consultar todos los productos seleccionados\\n\\nCada **tipo de acci\xf3n** definiri\xe1 su propio **type** y **payload**. Por ejemplo : el tipo de acci\xf3n **Registrar cliente** define el **type** como **REGISTER_CUSTOMER** y el **payload** como:\\n\\n```json\\n{\\n  id:0,\\n  name:\\"Jeyson\\",\\n  age:33,\\n  email:\\"jeogarod@gmail.com\\"\\n}\\n```\\n\\nDado que puede existir m\xe1s de una entidad de negocio, con uno o varios tipos de acci\xf3n, se recomienda definir e implementar un reducer por cada entidad de negocio.\\n\\nEn el siguiente ejemplo se definieron e implementaron dos reductores : cliente y producto. \\n\\n```javascript\\nexport const clienteReducer = (state = { }, action) => {\\n    switch (action.type) {\\n        case \\"REGISTER_CUSTOMER\\":\\n            return { state }\\n\\n        default:\\n            return state\\n    }\\n}\\n```\\n\\n```javascript\\nexport const productosReducer = (state = { productos : []}, action) => {\\n    switch (action.type) {\\n        case \\"ADD_PRODUCTO\\":\\n            return [...productos, action.payload]\\n        default:\\n            return state\\n    }\\n}\\n```\\n\\nCada reductor implementado puede ser combinado creando un \xfanico reductor. Esto se logra a trav\xe9s de **combineReducers**. \\n\\n```javascript\\nimport { createStore, combineReducers } from \'redux\'\\n\\nconst reducer = combineReducers({\\n    cliente: clienteReducer,\\n    productos: productosReducer\\n})\\n```\\n\\nFinalmente durante la creaci\xf3n del almac\xe9n se env\xeda como argumento a la funci\xf3n el resultado de la combinaci\xf3n de los reductores. \\n\\n```javascript\\nconst store = createStore(reducer)\\n```"},{"id":"/2025/05/18/Flux","metadata":{"permalink":"/cursos/blog/2025/05/18/Flux","source":"@site/blog/2025-05-18-Flux.md","title":"Arquitectura de datos Flux","description":"Flux es un patr\xf3n de arquitectura de datos para aplicaciones web que permiten gestionar el estado.","date":"2025-05-18T00:00:00.000Z","tags":[{"inline":false,"label":"flux","permalink":"/cursos/blog/tags/about-flux","description":"Tutoriales donde se menciona la palabra flux"},{"inline":false,"label":"Patrones de software","permalink":"/cursos/blog/tags/about-patron-software","description":"Tutoriales donde se menciona la palabra patrones de desarrollo o dise\xf1o de software"}],"readingTime":0.015,"hasTruncateMarker":true,"authors":[{"name":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","title":"Ing. de Sistemas","url":"https://github.com/jagarciar","page":null,"socials":{"github":"https://github.com/jagarciar"},"imageURL":"https://github.com/jagarciar.png","key":"jeogarod"}],"frontMatter":{"id":"flux","Titule":"Flux","description":"Flux es un patr\xf3n de arquitectura de datos para aplicaciones web que permiten gestionar el estado.","authors":["jeogarod"],"sidebar_position":1,"tags":["flux","patron-software"],"last_update":{"date":"05/18/2025","author":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},"unlisted":false,"prevItem":{"title":"Composici\xf3n de reductores","permalink":"/cursos/blog/composicion-reductores"}},"content":"\x3c!-- truncate --\x3e"}]}}')}}]);