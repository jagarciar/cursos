"use strict";(self.webpackChunkcursos=self.webpackChunkcursos||[]).push([[1394],{4159:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"programacion/reactjs/hooks/useQuery","title":"useQuery","description":"En este tutorial vamos hacer uso del hook useQuery para gestionar los datos as\xedncronos obtenidos de una API","source":"@site/docs/programacion/reactjs/hooks/useQuery.md","sourceDirName":"programacion/reactjs/hooks","slug":"/programacion/reactjs/hooks/useQuery","permalink":"/cursos/docs/programacion/reactjs/hooks/useQuery","draft":false,"unlisted":false,"editUrl":"https://github.com/jagarciar/cursos/tree/main/docs/programacion/reactjs/hooks/useQuery.md","tags":[{"inline":false,"label":"React","permalink":"/cursos/docs/tags/about-react","description":"Tutoriales donde se menciona la palabra react"},{"inline":false,"label":"React JS","permalink":"/cursos/docs/tags/about-react-js","description":"Tutoriales donde se menciona la palabra reactjs"},{"inline":false,"label":"NPM","permalink":"/cursos/docs/tags/about-npm","description":"Tutoriales donde se menciona la palabra npm"},{"inline":false,"label":"Vite","permalink":"/cursos/docs/tags/about-vite","description":"Tutoriales donde se menciona la palabra vite"},{"inline":false,"label":"Componente funcional","permalink":"/cursos/docs/tags/about-functional-component","description":"Tutoriales donde se menciona la palabra componente funcional"},{"inline":false,"label":"hooks","permalink":"/cursos/docs/tags/about-hooks","description":"Tutoriales donde se menciona la palabra hooks"},{"inline":false,"label":"useRef","permalink":"/cursos/docs/tags/about-useRef","description":"Tutoriales donde se menciona la palabra useRef"}],"version":"current","lastUpdatedBy":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","lastUpdatedAt":1750204800000,"sidebarPosition":14,"frontMatter":{"id":"useQuery","title":"useQuery","sidebar_position":14,"author":"jeogarod","description":"En este tutorial vamos hacer uso del hook useQuery para gestionar los datos as\xedncronos obtenidos de una API","tags":["react","reactjs","npm","vite","componente-funcional","hooks","useRef"],"last_update":{"date":"06/18/2025","author":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},"sidebar":"tutorialSidebar","previous":{"title":"useContext","permalink":"/cursos/docs/programacion/reactjs/hooks/useContext"},"next":{"title":"Frameworks","permalink":"/cursos/docs/reactjs/frameworks"}}');var s=r(4848),o=r(8453);const t={id:"useQuery",title:"useQuery",sidebar_position:14,author:"jeogarod",description:"En este tutorial vamos hacer uso del hook useQuery para gestionar los datos as\xedncronos obtenidos de una API",tags:["react","reactjs","npm","vite","componente-funcional","hooks","useRef"],last_update:{date:"06/18/2025",author:"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},c="useQuery",i={},l=[{value:"Revalidaci\xf3n",id:"revalidaci\xf3n",level:2}];function d(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"usequery",children:"useQuery"})}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.strong,{children:"useQuery"})," es un ",(0,s.jsx)(a.strong,{children:"hook"})," que nos permite realizar ",(0,s.jsx)(a.strong,{children:"peticiones de datos as\xedncronas"}),", como una llamada a una API, de manera eficiente y con un manejo autom\xe1tico de estados. Adem\xe1s, ",(0,s.jsx)(a.a,{href:"/cursos/docs/programacion/reactjs/frameworks/react-query",children:(0,s.jsx)(a.strong,{children:"React Query"})})," se encarga del ",(0,s.jsx)(a.strong,{children:"cacheo de los datos"}),", lo que significa que no tendr\xe1s que preocuparte por volver a hacer la misma petici\xf3n si los datos ya est\xe1n almacenados y siguen siendo v\xe1lidos."]}),"\n",(0,s.jsxs)(a.p,{children:["Vamos a crear la funci\xf3n ",(0,s.jsx)(a.strong,{children:"fetchCaracters"})," que se encargue de obtener los personajes de Rick & Morty. Los personajes de Rick and Morty se obtienen al consumir la API ",(0,s.jsx)(a.strong,{children:(0,s.jsx)(a.a,{href:"https://rickandmortyapi.com/api/character",children:"https://rickandmortyapi.com/api/character"})}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",metastring:'title="fetchCaracters.js"',children:"const fetchCaracters = async () => {\n    const response = await fetch(`https://rickandmortyapi.com/api/character`);\n    if (!response.ok) {\n        throw new Error('Error al obtener los datos del usuario');\n    }\n    return response.json();\n}\n\nexport default fetchCaracters;\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Luego vamos a crear el componente funcional ",(0,s.jsx)(a.strong,{children:"Characters"})," que a trav\xe9s del ",(0,s.jsx)(a.strong,{children:"hook"})," ",(0,s.jsx)(a.strong,{children:"useQuery"})," consume la API llamando a la funci\xf3n ",(0,s.jsx)(a.strong,{children:"fetchCaracters"}),". La variable ",(0,s.jsx)(a.strong,{children:"data"})," contendr\xe1 el resultado del consumo de la API. La variable ",(0,s.jsx)(a.strong,{children:"isLoading"})," contendr\xe1 la bandera que permite validar si ya fue consumida la API o no. Finalmente, la variable ",(0,s.jsx)(a.strong,{children:"isError"})," contendr\xe1 el error (en caso de generarse durante el consumo)."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",metastring:'title="Characters.jsx"',children:"import { useQuery } from '@tanstack/react-query';\nimport {fetchCaracters} from './fetchCharacters';\n\nexport const Characters = ({refresh}) => {\n    const { data, isLoading, isError } = useQuery({\n        queryKey : ['characters'], \n        queryFn: fetchCaracters});\n\n    if (isLoading) {\n        return <div>Cargando...</div>;\n    }\n\n    if (isError) {\n        return <div>Error al cargar los datos del usuario</div>;\n    }\n\n    return (\n        <select>\n            {data.results.map(character => (\n                <option key={character.id} value={character.id}>\n                    {character.name}\n                </option>\n            ))}\n        </select>\n    );\n}\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Finalmente debemos crear el cliente de ",(0,s.jsx)(a.a,{href:"/cursos/docs/programacion/reactjs/frameworks/react-query",children:(0,s.jsx)(a.strong,{children:"React Query"})})," en ",(0,s.jsx)(a.strong,{children:"main.jsx"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",metastring:'title="main.jsx"',children:"import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport { Characters } from './Characters.jsx'\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\nconst queryClient = new QueryClient();\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <Characters />\n    </QueryClientProvider>\n  </StrictMode>,\n)\n"})}),"\n",(0,s.jsx)(a.h2,{id:"revalidaci\xf3n",children:"Revalidaci\xf3n"}),"\n",(0,s.jsxs)(a.p,{children:["La ",(0,s.jsx)(a.strong,{children:"revalidaci\xf3n"})," se refiere al proceso de ",(0,s.jsx)(a.strong,{children:"actualizaci\xf3n"})," de los datos en la cach\xe9. Con ",(0,s.jsx)(a.strong,{children:"React Query"}),", la ",(0,s.jsx)(a.strong,{children:"revalidaci\xf3n"})," es autom\xe1tica y controlada por la biblioteca. Puedes configurar el ",(0,s.jsx)(a.strong,{children:"tiempo de caducidad"})," (tiempo m\xe1ximo que los datos se consideran v\xe1lidos) para cada consulta y ",(0,s.jsx)(a.strong,{children:"React Query"})," se encargar\xe1 de volver a validar los datos despu\xe9s de que haya transcurrido ese tiempo."]}),"\n",(0,s.jsxs)(a.p,{children:["Adem\xe1s del ",(0,s.jsx)(a.strong,{children:"tiempo de caducidad"}),", React Query tambi\xe9n ",(0,s.jsx)(a.strong,{children:"actualiza"})," autom\xe1ticamente los ",(0,s.jsx)(a.strong,{children:"datos en cach\xe9"})," cuando se realizan ",(0,s.jsx)(a.strong,{children:"mutaciones"})," (operaciones de escritura, como crear, actualizar o eliminar datos). Despu\xe9s de una mutaci\xf3n exitosa, ",(0,s.jsx)(a.strong,{children:"React Query"})," invalida autom\xe1ticamente la cach\xe9 de las consultas relevantes para garantizar que los datos sean precisos y est\xe9n actualizados."]}),"\n",(0,s.jsxs)(a.p,{children:["En nuestro ejemplo debemos modificar el componente ",(0,s.jsx)(a.strong,{children:"Characters"})," para adicionar el atributo ",(0,s.jsx)(a.strong,{children:"refetchInterval"})," en el ",(0,s.jsx)(a.strong,{children:"hook"})," ",(0,s.jsx)(a.strong,{children:"useHook"}),". Este atributo define cada cuantos segundos se debe actualizar la data."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",metastring:'title="Characters.jsx"',children:"const { data, isLoading, isError } = useQuery({\n        queryKey : ['characters'], \n        queryFn: fetchCaracters,\n        refetchInterval: 5000, // Revalidar cada 5 segundos});\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Con la ",(0,s.jsx)(a.strong,{children:"cach\xe9"})," y la ",(0,s.jsx)(a.strong,{children:"revalidaci\xf3n"})," inteligente, ",(0,s.jsx)(a.a,{href:"/cursos/docs/programacion/reactjs/frameworks/react-query",children:(0,s.jsx)(a.strong,{children:"React Query"})})," ",(0,s.jsx)(a.em,{children:"evita realizar peticiones innecesarias al servidor"}),". Cuando una consulta ya tiene datos en la cach\xe9 y a\xfan no ha caducado, ",(0,s.jsx)(a.a,{href:"/cursos/docs/programacion/reactjs/frameworks/react-query",children:(0,s.jsx)(a.strong,{children:"React Query"})})," devuelve instant\xe1neamente los datos almacenados en lugar de hacer una nueva solicitud. Incluso en situaciones en las que los datos est\xe9n caducados, ",(0,s.jsx)(a.a,{href:"/cursos/docs/programacion/reactjs/frameworks/react-query",children:(0,s.jsx)(a.strong,{children:"React Query"})})," solo realiza una nueva solicitud cuando el componente que realiza la consulta est\xe1 montado en la interfaz de usuario."]}),"\n",(0,s.jsxs)(a.p,{children:["Si queremos forzar la actualizaci\xf3n antes de que caduque el tiempo debemos hacer uso de la funci\xf3n ",(0,s.jsx)(a.strong,{children:"refetch"}),"."]}),"\n",(0,s.jsxs)(a.p,{children:["En nuestro ejemplo, el componente funcional ",(0,s.jsx)(a.strong,{children:"Characters"})," adicion\xf3 un bot\xf3n que ejecuta la funci\xf3n ",(0,s.jsx)(a.strong,{children:"refetch()"})," proporcionada por el ",(0,s.jsx)(a.strong,{children:"hook"})," ",(0,s.jsx)(a.strong,{children:"useQuery"}),". Al oprimir click sobre el bot\xf3n, se actualizan la data consumiendo nuevamente la API a trav\xe9s de la funci\xf3n ",(0,s.jsx)(a.strong,{children:"fetchCharacters"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",metastring:'title="Characters.jsx"',children:"import { useQuery } from '@tanstack/react-query';\nimport { fetchCaracters } from './fetchCharacters';\n\nexport const Characters = ({ refresh }) => {\n    const { data, isLoading, isError, refetch } = useQuery({\n        queryKey: ['characters'],\n        queryFn: fetchCaracters,\n        refetchInterval: 5000\n    });\n\n    if (isLoading) {\n        return <div>Cargando...</div>;\n    }\n\n    if (isError) {\n        return <div>Error al cargar los datos del usuario</div>;\n    }\n\n    return (\n        <>\n            <select>\n                {data.results.map(character => (\n                    <option key={character.id} value={character.id}>\n                        {character.name}\n                    </option>\n                ))}\n            </select>\n            <button onClick={() => refetch()}>Actualizar datos</button>\n        </>\n\n    );\n}\n"})})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,a,r)=>{r.d(a,{R:()=>t,x:()=>c});var n=r(6540);const s={},o=n.createContext(s);function t(e){const a=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),n.createElement(o.Provider,{value:a},e.children)}}}]);