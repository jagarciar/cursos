"use strict";(self.webpackChunkcursos=self.webpackChunkcursos||[]).push([[8130],{7735:a=>{a.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"programacion-declarativa","metadata":{"permalink":"/blog/programacion-declarativa","editUrl":"https://github.com/jagarciar/cursos/tree/main/blog/2025/04-23-programacion-declarativa.md","source":"@site/blog/2025/04-23-programacion-declarativa.md","title":"Programaci\xf3n declarativa","description":"Determina qu\xe9 produce un evento","date":"2025-04-23T00:00:00.000Z","tags":[{"inline":true,"label":"programacion","permalink":"/blog/tags/programacion"},{"inline":true,"label":"declarativa","permalink":"/blog/tags/declarativa"},{"inline":false,"label":"React","permalink":"/blog/tags/about-react","description":"Tutoriales donde se menciona la palabra react"},{"inline":false,"label":"React JS","permalink":"/blog/tags/about-react-js","description":"Tutoriales donde se menciona la palabra reactjs"}],"readingTime":2.135,"hasTruncateMarker":true,"authors":[{"name":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","title":"Ing. de Sistemas","url":"https://github.com/jagarciar","page":{"permalink":"/blog/authors/jeogarod"},"socials":{"github":"https://github.com/jagaraciar"},"imageURL":"https://github.com/jagarciar.png","key":"jeogarod"}],"frontMatter":{"slug":"programacion-declarativa","title":"Programaci\xf3n declarativa","authors":"jeogarod","tags":["programacion","declarativa","react","reactjs"]},"unlisted":false,"nextItem":{"title":"Programaci\xf3n imperativa","permalink":"/blog/programacion-imperativa"}},"content":"## Determina qu\xe9 produce un evento\\n\\nPuedes desencadenar actualizaciones de estado en respuesta a dos tipos de entradas:\\n\\n- Entradas humanas, como hacer click en un bot\xf3n, escribir en un campo, navegar a un link.\\n- Entradas del ordenador, como recibir una respuesta del navegador, que se complete un timeout, una imagen cargando.\\n\\n## dentifica los diferentes estados visuales de tu componente \\n\\nEn las ciencias de la computaci\xf3n, tal vez escuchar\xe1s algo sobre una **m\xe1quina de estad** siendo este uno de muchos **estados**. Si trabajas con un dise\xf1ador, habr\xe1s visto bocetos para diferentes **estados visuales**. React se encuentra en un punto intermedio de dise\xf1o y ciencias de la computaci\xf3n, asi que ambas ideas son fuentes de inspiraci\xf3n.\\n\\nPrimero, necesitas visualizar todos los diferentes **estados** de la UI que el usuario pueda ver:\\n\\n- Vac\xedo: El formulario tiene deshabilitado el bot\xf3n \u201cEnviar\u201d.\\n- Escribiendo: El formulario tiene habilitado el bot\xf3n \u201cEnviar\u201d.\\n- Enviando: El formulario est\xe1 completamente deshabilitado. Se muestra un indicador de carga.\\n- \xc9xito: El mensaje \u201cGracias\u201d se muestra en lugar del formulario.\\n- Error: Igual que el estado de Escribiendo, pero con un mensaje de error extra.\\n\\nAl igual que un dise\xf1ador, querr\xe1s \u201cesbozar\u201d o crear \u201cbocetos\u201d para los diferentes estados antes de a\xf1adir tu l\xf3gica. Por ejemplo, aqu\xed hay un boceto solo para la parte visual del formulario. Este boceto es controlado por una prop llamado status con valor por defecto de \'empty\':\\n\\n\\n```javascript title=\\"/src/Componente.jsx\\"\\nexport default function Form({\\n  status = \'empty\'\\n}) {\\n  if (status === \'success\') {\\n    return <h1>\xa1Correcto!</h1>\\n  }\\n  return (\\n    <>\\n      <h2>Cuestionario sobre ciudades</h2>\\n      <p>\\n       \xbfEn qu\xe9 ciudad hay un cartel que convierte el aire en agua potable?\\n      </p>\\n      <form>\\n        <textarea />\\n        <br />\\n        <button>\\n          Enviar\\n        </button>\\n      </form>\\n    </>\\n  )\\n}\\n\\n```\\n\\nEs viable declarar variables de estado para actualizar la UI. Para el formulario que vas a desarrollar, necesitar\xe1s cambiar el estado en respuesta de diferentes entradas:\\n\\n- Cambiar la entrada de texto (humano) deber\xeda cambiar del estado Vac\xedo al estado Escribiendo o al rev\xe9s, dependiendo de si la caja de texto est\xe1 vac\xeda o no.\\n- Hacer click el el bot\xf3n Enviar (humano) deber\xeda cambiarlo al estado Enviando .\\n- Una respuesta exitosa de red (ordenador) deber\xeda cambiarlo al estado \xc9xito.\\n- Una respuesta fallida de red (ordenador) deber\xeda cambiarlo al estado Error con el mensaje de error correspondiente.\\n\\n### Representa el estado de memoria haciendo uso de useState\\n\\nEn ocaciones, necesitar\xe1s representar los estados visuales de tu componente en la memoria con **useState**. Consulta m\xe1s informaci\xf3n de **useState** a trav\xe9s del siguiente link: [](../../docs/reactjs/useState)\\n\\n\x3c!-- truncate --\x3e"},{"id":"programacion-imperativa","metadata":{"permalink":"/blog/programacion-imperativa","editUrl":"https://github.com/jagarciar/cursos/tree/main/blog/2025/04-23-programacion-imperativa.md","source":"@site/blog/2025/04-23-programacion-imperativa.md","title":"Programaci\xf3n imperativa","description":"Cuando dise\xf1as interacciones con la UI, seguramente pensar\xe1s en como la UI cambia en respuesta a las acciones del usuario. Imagina un formulario que permita al usuario enviar una respuesta:","date":"2025-04-23T00:00:00.000Z","tags":[{"inline":true,"label":"programacion","permalink":"/blog/tags/programacion"},{"inline":true,"label":"imperativa","permalink":"/blog/tags/imperativa"},{"inline":false,"label":"React","permalink":"/blog/tags/about-react","description":"Tutoriales donde se menciona la palabra react"},{"inline":false,"label":"React JS","permalink":"/blog/tags/about-react-js","description":"Tutoriales donde se menciona la palabra reactjs"}],"readingTime":1.075,"hasTruncateMarker":false,"authors":[{"name":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","title":"Ing. de Sistemas","url":"https://github.com/jagarciar","page":{"permalink":"/blog/authors/jeogarod"},"socials":{"github":"https://github.com/jagaraciar"},"imageURL":"https://github.com/jagarciar.png","key":"jeogarod"}],"frontMatter":{"slug":"programacion-imperativa","title":"Programaci\xf3n imperativa","authors":"jeogarod","tags":["programacion","imperativa","react","reactjs"]},"unlisted":false,"prevItem":{"title":"Programaci\xf3n declarativa","permalink":"/blog/programacion-declarativa"}},"content":"Cuando dise\xf1as interacciones con la UI, seguramente pensar\xe1s en como la UI cambia en respuesta a las acciones del usuario. Imagina un formulario que permita al usuario enviar una respuesta:\\n\\n- Cuando escribes algo en el formulario, el bot\xf3n \u201cEnviar\u201d se habilita.\\n- Cuando presionas \u201cEnviar\u201d, tanto el formulario como el bot\xf3n se deshabilitan, y un indicativo de carga aparece.\\n    - Si la petici\xf3n es exitosa, el formulario se oculta, y un mensaje \u201cGracias\u201d aparece.\\n    - Si la petici\xf3n falla, un mensaje de error aparece, y el formulario se habilita de nuevo.\\n\\nEn la programaci\xf3n imperativa, lo descrito arriba se corresponde directamente con como\\nimplementas la interacci\xf3n. Tienes que escribir las instrucciones exactas para manipular la UI dependiendo de lo que acabe de suceder. Esta es otra manera de abordar este concepto: imagina acompa\xf1ar a alguien en un coche mientras le dices paso a paso que tiene que hacer.\\n\\n:::tip\\n Se llama imperativo por que tienes que \u201cmandar\u201d a cada elemento, desde el indicativo de carga hasta el bot\xf3n, dici\xe9ndole al ordenador c\xf3mo tiene que actualizar la UI.\\n :::\\n\\n:::tip\\n Manipular la UI de forma imperativa funciona lo suficientemente bien en ejemplos aislados, pero se vuelve mas complicado de manejar de forma exponencial en sistemas complejos. Imagina actualizar una pagina llena de formularios diferentes\\n :::"}]}}')}}]);