"use strict";(self.webpackChunkcursos=self.webpackChunkcursos||[]).push([[8286],{8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>c});var a=o(6540);const r={},s=a.createContext(r);function t(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(s.Provider,{value:n},e.children)}},9481:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"programacion/reactjs/hooks/useRef","title":"useRef","description":"En este tutorial vamos hacer uso del hook useRef para acceder a un elemento HTML a trav\xe9s del DOM","source":"@site/docs/programacion/reactjs/hooks/useRef.md","sourceDirName":"programacion/reactjs/hooks","slug":"/programacion/reactjs/hooks/useRef","permalink":"/docs/programacion/reactjs/hooks/useRef","draft":false,"unlisted":false,"editUrl":"https://github.com/jagarciar/cursos/tree/main/docs/programacion/reactjs/hooks/useRef.md","tags":[{"inline":false,"label":"React","permalink":"/docs/tags/about-react","description":"Tutoriales donde se menciona la palabra react"},{"inline":false,"label":"React JS","permalink":"/docs/tags/about-react-js","description":"Tutoriales donde se menciona la palabra reactjs"},{"inline":false,"label":"NPM","permalink":"/docs/tags/about-npm","description":"Tutoriales donde se menciona la palabra npm"},{"inline":false,"label":"Vite","permalink":"/docs/tags/about-vite","description":"Tutoriales donde se menciona la palabra vite"},{"inline":false,"label":"Componente funcional","permalink":"/docs/tags/about-functional-component","description":"Tutoriales donde se menciona la palabra componente funcional"},{"inline":false,"label":"hooks","permalink":"/docs/tags/about-hooks","description":"Tutoriales donde se menciona la palabra hooks"},{"inline":false,"label":"useRef","permalink":"/docs/tags/about-useRef","description":"Tutoriales donde se menciona la palabra useRef"}],"version":"current","lastUpdatedBy":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","lastUpdatedAt":1745884800000,"sidebarPosition":4,"frontMatter":{"id":"useRef","title":"useRef","sidebar_position":4,"author":"jeogarod","description":"En este tutorial vamos hacer uso del hook useRef para acceder a un elemento HTML a trav\xe9s del DOM","tags":["react","reactjs","npm","vite","componente-funcional","hooks","useRef"],"last_update":{"date":"04/29/2025","author":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},"sidebar":"tutorialSidebar","previous":{"title":"useEffect","permalink":"/docs/programacion/reactjs/hooks/useEffect"},"next":{"title":"useMemo","permalink":"/docs/programacion/reactjs/hooks/useMemo"}}');var r=o(4848),s=o(8453);const t={id:"useRef",title:"useRef",sidebar_position:4,author:"jeogarod",description:"En este tutorial vamos hacer uso del hook useRef para acceder a un elemento HTML a trav\xe9s del DOM",tags:["react","reactjs","npm","vite","componente-funcional","hooks","useRef"],last_update:{date:"04/29/2025",author:"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},c="useRef",i={},l=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"useref",children:"useRef"})}),"\n",(0,r.jsxs)(n.p,{children:["El ",(0,r.jsx)(n.strong,{children:"hook"})," ",(0,r.jsx)(n.strong,{children:"useRef"})," es una funci\xf3n especial en ",(0,r.jsx)(n.strong,{children:"React"})," que permite a los desarrolladores acceder y ",(0,r.jsx)(n.strong,{children:"interactuar"})," con elementos del ",(0,r.jsx)(n.strong,{children:"DOM"})," de manera directa. A diferencia de otros enfoques en ",(0,r.jsx)(n.strong,{children:"React"}),", donde la ",(0,r.jsx)(n.strong,{children:"manipulaci\xf3n"})," del ",(0,r.jsx)(n.strong,{children:"DOM"})," se maneja principalmente a trav\xe9s del ",(0,r.jsx)(n.strong,{children:"estado"})," y las ",(0,r.jsx)(n.strong,{children:"props"}),", ",(0,r.jsx)(n.strong,{children:"useRef"})," proporciona una forma de referenciar elementos de manera m\xe1s imperativa."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["A diferencia de otros hooks como ",(0,r.jsx)(n.a,{href:"/docs/programacion/reactjs/hooks/useState",children:"useState"})," o ",(0,r.jsx)(n.a,{href:"/docs/programacion/reactjs/hooks/useEffect",children:"useEffect"}),", ",(0,r.jsx)(n.strong,{children:"useRef"})," no provoca una actualizaci\xf3n del componente cuando cambia. Por lo tanto, ",(0,r.jsx)(n.strong,{children:"useRef"})," es ideal para casos en los que necesitamos mantener una referencia constante a un elemento o valor sin causar efectos secundarios en el renderizado del componente."]})}),"\n",(0,r.jsx)(n.p,{children:"Supongamos el siguiente ejemplo:"}),"\n",(0,r.jsxs)(n.p,{children:["En el archivo ",(0,r.jsx)(n.strong,{children:"/src/RefApp.jsx"})," se implement\xf3 y export\xf3 el componente funcional ",(0,r.jsx)(n.strong,{children:"RefApp"}),". El componente ",(0,r.jsx)(n.strong,{children:"RefApp"})," tiene una variable de estado ",(0,r.jsx)(n.strong,{children:"contador"})," con su respectiva funci\xf3n ",(0,r.jsx)(n.strong,{children:"set"})," ",(0,r.jsx)(n.strong,{children:"setContador"}),". Adicionalmente, el componente ",(0,r.jsx)(n.strong,{children:"RefApp"})," tiene una funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleClick"})," que responde al evento ",(0,r.jsx)(n.strong,{children:"onClick"})," de un bot\xf3n en el retorno del componente. La funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleClick"})," se encarga de sumar el valor de la variable de estado ",(0,r.jsx)(n.strong,{children:"contador"})," + 1. El componente ",(0,r.jsx)(n.strong,{children:"RefApp"})," tambi\xe9n defini\xf3 el ",(0,r.jsx)(n.strong,{children:"hook"})," ",(0,r.jsx)(n.strong,{children:"useEffect"})," que solo nos va a imprimir por consola cada que se actualiza el valor de la variable ",(0,r.jsx)(n.strong,{children:"contador"}),". Finalmente, el componente ",(0,r.jsx)(n.strong,{children:"RefApp"})," exporta una caja de texto con el valor de la variable de estado ",(0,r.jsx)(n.strong,{children:"contador"})," y un bot\xf3n que se encarga de ejecutar la funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleClick"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="/src/RefApp.jsx"',children:'import React, { useEffect } from \'react\'\nimport { useState } from \'react\'\n\nexport const RefApp = () => {\n\n    const [contador, setContador] = useState(0)\n\n    const handleClick = (event) => {\n        setContador(contador + 1);\n    }\n\n    useEffect(() => { console.log("Se actualiz\xf3 el componente") }, [contador])\n\n    return (\n        <>\n            <input id="contador" name="contador" type="number"\n                value={contador} disabled />\n            <button onClick={handleClick}>Sumar +1</button>\n        </>\n    )\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Es decir, ",(0,r.jsx)(n.strong,{children:"RefApp"})," se va a renderizar cada que se actualiza el valor de la variable de estado ",(0,r.jsx)(n.strong,{children:"contador"}),". \xbfPero y si no quisieramos renderizar el componente?."]}),"\n",(0,r.jsxs)(n.p,{children:["En este caso, debemos importar ",(0,r.jsx)(n.strong,{children:"useRef"})," y asignarlo a una variable dentro de nuestro componente funcional, en este caso creamos la variable ",(0,r.jsx)(n.strong,{children:"inputRef"}),". La funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleClick"})," cumple el mismo objetivo : actualizar el valor de un contador en 1. Sin embargo, a diferencia del anterior ejemplo (cuando usamos ",(0,r.jsx)(n.strong,{children:"useState"})," y ",(0,r.jsx)(n.strong,{children:"useEffect"}),"), al oprimir click sobre el bot\xf3n que ejecuta la funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleClick"}),", no se renderiza el componente, esto dado la actualizaci\xf3n del elemento ",(0,r.jsx)(n.strong,{children:"HTML"})," es directamente sobre el ",(0,r.jsx)(n.strong,{children:"DOM"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="/src/RefApp.jsx"',children:'import React, { useEffect } from \'react\'\nimport { useRef } from \'react\'\n\nexport const RefApp = () => {\n\n    const inputRef = useRef();\n\n    const handleClick = (event) => {\n        if(inputRef.current.value == "")\n            inputRef.current.value = 0;\n        else\n            inputRef.current.value = Number(inputRef.current.value) + 1;\n    }\n\n    useEffect(() => { console.log("Se actualiz\xf3 el componente") }, )\n\n    return (\n        <>\n            <input id="contador" name="contador" type="number"\n                ref={inputRef} disabled/>\n            <button onClick={handleClick}>Sumar +1</button>\n        </>\n    )\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);