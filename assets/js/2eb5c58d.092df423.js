"use strict";(self.webpackChunkcursos=self.webpackChunkcursos||[]).push([[5383],{1401:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"programacion/reactjs/hooks/useForm","title":"useForm","description":"En este tutorial vamos hacer uso del hook useForm para estandarizar el uso de campos en formularios en proyectos ReactJS","source":"@site/docs/programacion/reactjs/hooks/useForm.md","sourceDirName":"programacion/reactjs/hooks","slug":"/programacion/reactjs/hooks/useForm","permalink":"/docs/programacion/reactjs/hooks/useForm","draft":false,"unlisted":false,"editUrl":"https://github.com/jagarciar/cursos/tree/main/docs/programacion/reactjs/hooks/useForm.md","tags":[{"inline":false,"label":"React","permalink":"/docs/tags/about-react","description":"Tutoriales donde se menciona la palabra react"},{"inline":false,"label":"React JS","permalink":"/docs/tags/about-react-js","description":"Tutoriales donde se menciona la palabra reactjs"},{"inline":false,"label":"NPM","permalink":"/docs/tags/about-npm","description":"Tutoriales donde se menciona la palabra npm"},{"inline":false,"label":"Vite","permalink":"/docs/tags/about-vite","description":"Tutoriales donde se menciona la palabra vite"},{"inline":false,"label":"useState","permalink":"/docs/tags/about-useState","description":"Tutoriales donde se menciona la palabra useState"},{"inline":false,"label":"useEffect","permalink":"/docs/tags/about-useEffect","description":"Tutoriales donde se menciona la palabra useEffect"},{"inline":false,"label":"useFetch","permalink":"/docs/tags/about-useFetch","description":"Tutoriales donde se menciona la palabra useFetch"},{"inline":false,"label":"hooks","permalink":"/docs/tags/about-hooks","description":"Tutoriales donde se menciona la palabra hooks"},{"inline":false,"label":"useForm","permalink":"/docs/tags/about-useForm","description":"Tutoriales donde se menciona la palabra useForm"}],"version":"current","lastUpdatedBy":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","lastUpdatedAt":1745452800000,"sidebarPosition":7,"frontMatter":{"id":"useForm","title":"useForm","sidebar_position":7,"author":"jeogarod","description":"En este tutorial vamos hacer uso del hook useForm para estandarizar el uso de campos en formularios en proyectos ReactJS","tags":["react","reactjs","npm","vite","useState","useEffect","useFetch","hooks","useForm"],"last_update":{"date":"04/24/2025","author":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},"sidebar":"tutorialSidebar","previous":{"title":"useCallback","permalink":"/docs/programacion/reactjs/hooks/useCallback"},"next":{"title":"useReducer","permalink":"/docs/programacion/reactjs/hooks/useReducer"}}');var r=a(4848),s=a(8453);const t={id:"useForm",title:"useForm",sidebar_position:7,author:"jeogarod",description:"En este tutorial vamos hacer uso del hook useForm para estandarizar el uso de campos en formularios en proyectos ReactJS",tags:["react","reactjs","npm","vite","useState","useEffect","useFetch","hooks","useForm"],last_update:{date:"04/24/2025",author:"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},l="useForm",i={},d=[];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"useform",children:"useForm"})}),"\n",(0,r.jsxs)(n.p,{children:["En el tutorial ",(0,r.jsx)(n.a,{href:"/docs/programacion/reactjs/proyecto/eventos",children:"Eventos"})," se explic\xf3 el evento ",(0,r.jsx)(n.strong,{children:"onChange"})," que debe ser incrustado por cada elemento ",(0,r.jsx)(n.strong,{children:"HTML"})," que requiera actualizar el valor del campo con un valor de la variable de estado."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Un campo de un formulario cuyos valores son controlados por React es denominado \u201c\n",(0,r.jsx)(n.strong,{children:"componente controlado"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["En el siguiente archivo ",(0,r.jsx)(n.strong,{children:"/src/FormApp.jsx"})," se implement\xf3 el componente funcional ",(0,r.jsx)(n.strong,{children:"FormApp"}),". Este componente defini\xf3 dos variables de estado : ",(0,r.jsx)(n.strong,{children:"nombre"})," y ",(0,r.jsx)(n.strong,{children:"edad"}),". Cada variable de estado tiene su propia funci\xf3n ",(0,r.jsx)(n.strong,{children:"set"})," ",(0,r.jsx)(n.strong,{children:"setNombre"})," y ",(0,r.jsx)(n.strong,{children:"setEdad"}),". Adicionalmente, el componente defini\xf3 tres funciones : ",(0,r.jsx)(n.strong,{children:"handleSubmit"}),", ",(0,r.jsx)(n.strong,{children:"handleChangeNombre"})," y ",(0,r.jsx)(n.strong,{children:"handleChangeEdad"}),". Las funciones ",(0,r.jsx)(n.strong,{children:"handleChangeNombre"})," y ",(0,r.jsx)(n.strong,{children:"handleChangeEdad"})," actualizan el valor de la variable de estado : ",(0,r.jsx)(n.strong,{children:"nombre"})," o ",(0,r.jsx)(n.strong,{children:"edad"})," seg\xfan corresponda. La funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleSubmit"})," previene el refresh que se ejecuta por defecto al enviar un formulario."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="/src/FormApp.jsx"',children:'import React from \'react\'\nimport { useState } from \'react\';\n\nexport const FormApp = () => {\n\n    const [nombre, setNombre] = useState(\'\');\n    const [edad, setEdad] = useState(0);\n\n    const handleChangeNombre = (event) => {\n        setNombre(event.target.value);\n    };\n\n    const handleChangeEdad = (event) => {\n        setEdad(Number(event.target.value));\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\'Se envi\xf3 el formulario\');\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor="nombre">Nombre : </label>\n                    <input type="text" id="nombre" onChange={handleChangeNombre} value={nombre}/>\n                </div>\n                <div>\n                    <label htmlFor="edad">Edad : </label>\n                    <input type="number" id="edad" onChange={handleChangeEdad} value={edad}/>\n                </div>\n                <button onSubmit={handleSubmit}>Enviar</button>\n            </form>\n        </>\n    )\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Como podemos ver, existe una definici\xf3n transversal para las funciones orientadas a cumplir con el objetivo del evento ",(0,r.jsx)(n.strong,{children:"onChange"}),". Todas las funciones que capturan este evento actualizan el valor de una variable de estado. Por esta raz\xf3n, esta definici\xf3n puede ser llevada a un ",(0,r.jsx)(n.strong,{children:"hook"})," al cu\xe1l nombraremos ",(0,r.jsx)(n.strong,{children:"useForm"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["El ",(0,r.jsx)(n.strong,{children:"hook"})," ",(0,r.jsx)(n.strong,{children:"useForm"})," recibe un par\xe1metro de tipo objeto con los valores iniciales del formulario y define la variable de estado ",(0,r.jsx)(n.strong,{children:"values"})," y su funci\xf3n ",(0,r.jsx)(n.strong,{children:"set"})," ",(0,r.jsx)(n.strong,{children:"setValues"})," para almacenar y actualizar los campos del formulario. Adicionalmente, el ",(0,r.jsx)(n.strong,{children:"hook"})," ",(0,r.jsx)(n.strong,{children:"useForm"})," defini\xf3 la funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleChange"})," para capturar el nombre del campo del formulario y el valor.  El ",(0,r.jsx)(n.strong,{children:"hook"})," ",(0,r.jsx)(n.strong,{children:"useForm"})," retorna el arreglo con los valores de los campos del formulario. En otras palabras, se esta generalizando la creaci\xf3n de las variables de estado de cada campo de un formulario y su funci\xf3n ",(0,r.jsx)(n.strong,{children:"set"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="/src/useForm.jsx"',children:'import { useState } from "react";\n\nexport const useForm = (initialValues) => {\n    const [values, setValues] = useState(initialValues);\n\n    const handleChange = (event) => {\n      console.log(event.target.name);\n      setValues({\n        ...values,\n        [event.target.name]: event.target.value\n      });\n    }\n\n    return [\n        values,\n        handleChange\n    ];\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["El componente ",(0,r.jsx)(n.strong,{children:"FormApp"})," ya no crear\xe1 las dos variables de estado : ",(0,r.jsx)(n.strong,{children:"nombre"})," y ",(0,r.jsx)(n.strong,{children:"edad"}),", ni tampoco las funciones ",(0,r.jsx)(n.strong,{children:"set"})," ",(0,r.jsx)(n.strong,{children:"setNombre"})," y ",(0,r.jsx)(n.strong,{children:"setEdad"}),". Por el contrario, el componente ",(0,r.jsx)(n.strong,{children:"FormApp"})," importar\xe1 el ",(0,r.jsx)(n.strong,{children:"hook"})," ",(0,r.jsx)(n.strong,{children:"useForm"}),", el cu\xe1l exporta : ",(0,r.jsx)(n.strong,{children:"values"})," y ",(0,r.jsx)(n.strong,{children:"handleChange"}),". Cada elemento ",(0,r.jsx)(n.strong,{children:"HTML"})," del formulario que retorna el componente ",(0,r.jsx)(n.strong,{children:"FormApp"})," deber\xe1 incluir el atributo ",(0,r.jsx)(n.strong,{children:"name"})," y deber\xe1 invocar la funci\xf3n ",(0,r.jsx)(n.strong,{children:"handleChange"})," en el evento ",(0,r.jsx)(n.strong,{children:"onChange"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="/src/FormApp.jsx"',children:'import React from \'react\'\nimport { useState } from \'react\';\nimport { useForm } from \'./useForm\';\n\nexport const FormApp = () => {\n\n    const initialState = { nombre: "", edad: 0 };\n    const [values, handleChange] = useForm(initialState);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(values);\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor="nombre">Nombre : </label>\n                    <input type="text" id="nombre" name="nombre" onChange={handleChange}/>\n                </div>\n                <div>\n                    <label htmlFor="edad">Edad : </label>\n                    <input type="number" id="edad" name="edad" onChange={handleChange}/>\n                </div>\n                <button>Enviar</button>\n            </form>\n        </>\n    )\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var o=a(6540);const r={},s=o.createContext(r);function t(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);