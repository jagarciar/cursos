"use strict";(self.webpackChunkcursos=self.webpackChunkcursos||[]).push([[8414],{2480:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"programacion/reactjs/hooks/useState","title":"useState","description":"En este tutorial vamos hacer uso del hook useState para almacenar y acceder a las variables de estado de un aplicativo o proyecto ReactJS","source":"@site/docs/programacion/reactjs/hooks/useState.md","sourceDirName":"programacion/reactjs/hooks","slug":"/programacion/reactjs/hooks/useState","permalink":"/docs/programacion/reactjs/hooks/useState","draft":false,"unlisted":false,"editUrl":"https://github.com/jagarciar/cursos/tree/main/docs/programacion/reactjs/hooks/useState.md","tags":[{"inline":false,"label":"React","permalink":"/docs/tags/about-react","description":"Tutoriales donde se menciona la palabra react"},{"inline":false,"label":"React JS","permalink":"/docs/tags/about-react-js","description":"Tutoriales donde se menciona la palabra reactjs"},{"inline":false,"label":"createRoot","permalink":"/docs/tags/about-createRoot","description":"Tutoriales donde se menciona la palabra createRoot"},{"inline":false,"label":"NPM","permalink":"/docs/tags/about-npm","description":"Tutoriales donde se menciona la palabra npm"},{"inline":false,"label":"Vite","permalink":"/docs/tags/about-vite","description":"Tutoriales donde se menciona la palabra vite"},{"inline":false,"label":"useState","permalink":"/docs/tags/about-useState","description":"Tutoriales donde se menciona la palabra useState"},{"inline":false,"label":"hooks","permalink":"/docs/tags/about-hooks","description":"Tutoriales donde se menciona la palabra hooks"},{"inline":false,"label":"Estado","permalink":"/docs/tags/about-estado","description":"Tutoriales donde se menciona la palabra estado"}],"version":"current","lastUpdatedBy":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez","lastUpdatedAt":1745452800000,"sidebarPosition":2,"frontMatter":{"id":"useState","Titule":"useState","sidebar_position":2,"description":"En este tutorial vamos hacer uso del hook useState para almacenar y acceder a las variables de estado de un aplicativo o proyecto ReactJS","author":"jeogarod","tags":["react","reactjs","createRoot","npm","vite","useState","hooks","estado"],"last_update":{"date":"04/24/2025","author":"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n","permalink":"/docs/programacion/reactjs/hooks/intro-hooks"},"next":{"title":"useEffect","permalink":"/docs/programacion/reactjs/hooks/useEffect"}}');var t=n(4848),s=n(8453);const r={id:"useState",Titule:"useState",sidebar_position:2,description:"En este tutorial vamos hacer uso del hook useState para almacenar y acceder a las variables de estado de un aplicativo o proyecto ReactJS",author:"jeogarod",tags:["react","reactjs","createRoot","npm","vite","useState","hooks","estado"],last_update:{date:"04/24/2025",author:"Jeyson Andr\xe9s Garc\xeda Rodr\xedguez"}},i="useState",c={},l=[];function d(e){const a={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"usestate",children:"useState"})}),"\n",(0,t.jsxs)(a.p,{children:["Los componentes a menudo necesitan cambiar lo que se muestra en pantalla como resultado de una interacci\xf3n. Escribir dentro de un formulario deber\xeda actualizar el campo de texto, hacer clic en \u201csiguiente\u201d en un carrusel de im\xe1genes deber\xeda cambiar la imagen que es mostrada; hacer clic en un bot\xf3n para comprar un producto deber\xeda actualizar el carrito de compras. En los ejemplos anteriores los componentes deben \u201crecordar\u201d cosas: el campo de texto, la imagen actual, el carrito de compras. En React, a este tipo de memoria de los componentes se le conoce como ",(0,t.jsx)(a.strong,{children:"estado"}),"."]}),"\n",(0,t.jsxs)(a.p,{children:["Como memoria de un componente, el ",(0,t.jsx)(a.strong,{children:"estado"})," no es como una ",(0,t.jsx)(a.strong,{children:"variable regular"})," que desaparece despu\xe9s de que tu funci\xf3n devuelva un valor. Cuando React llama a tu componente, te da una ",(0,t.jsx)(a.strong,{children:"instant\xe1nea del estado"})," para ese renderizado en particular. Tu componente devuelve una instant\xe1nea de la interfaz de usuario con un nuevo conjunto de accesorios y controladores de eventos en su JSX, todo calculado usando los valores de estado de ese renderizado."]}),"\n",(0,t.jsxs)(a.p,{children:["En React, ",(0,t.jsx)(a.strong,{children:"useState"}),', as\xed como cualquier otra funci\xf3n que empiece con "use", se le conoce como ',(0,t.jsx)(a.strong,{children:"Hook"}),". Los ",(0,t.jsx)(a.strong,{children:"Hooks"})," son funciones especiales que s\xf3lo est\xe1n disponibles mientras React est\xe1 renderizando. ",(0,t.jsx)(a.strong,{children:"useState"})," es un ",(0,t.jsx)(a.strong,{children:"Hook"})," de ",(0,t.jsx)(a.strong,{children:"React"})," que permite agregar una ",(0,t.jsx)(a.strong,{children:"variable de estado"})," a un ",(0,t.jsx)(a.strong,{children:"componente"}),"."]}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsxs)(a.p,{children:["Las ",(0,t.jsx)(a.strong,{children:"variables de estado"})," pueden parecerse a las variables normales de JavaScript en las que se puede leer y escribir. Sin embargo, el estado se comporta m\xe1s como una instant\xe1nea. Al asignarlo no se cambia la variable de estado que ya tienes, sino que se ",(0,t.jsx)(a.strong,{children:"desencadena"})," una rerenderizado."]})}),"\n",(0,t.jsxs)(a.p,{children:["En el siguiente ejemplo hemos creado el componente ",(0,t.jsx)(a.strong,{children:"Carro"}),". El componente ",(0,t.jsx)(a.strong,{children:"Carro"})," tiene dos props : ",(0,t.jsx)(a.strong,{children:"nombre"})," y ",(0,t.jsx)(a.strong,{children:"tipo"})," y dos variables : ",(0,t.jsx)(a.strong,{children:"name"})," y ",(0,t.jsx)(a.strong,{children:"type"}),". Las dos variables definen su funci\xf3n ",(0,t.jsx)(a.strong,{children:"set"})," (aquella que permite actualizar el valor de la variable). En nuestro caso tenemos dos funciones : ",(0,t.jsx)(a.strong,{children:"setName"})," y ",(0,t.jsx)(a.strong,{children:"setType"}),"."]}),"\n",(0,t.jsxs)(a.p,{children:["Por tal motivo, ",(0,t.jsx)(a.strong,{children:"useState"})," le permite al componente ",(0,t.jsx)(a.strong,{children:"Carro"})," tener dos estados : ",(0,t.jsx)(a.strong,{children:"name"})," y ",(0,t.jsx)(a.strong,{children:"type"}),"."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",metastring:'title="/src/CarroApp.jsx"',children:"import { useState } from 'react';\nimport React from 'react'\n\nexport const Carro = ({nombre, tipo}) => {\n\n  const [name, setName] = useState(nombre)\n  const [type, setType] = useState(tipo)\n  \n  return (\n    <div>{name}</div>\n  )\n}\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Para poder entender el uso del ",(0,t.jsx)(a.strong,{children:"setName"})," y ",(0,t.jsx)(a.strong,{children:"setType"})," debemos adicionar interacciones a nuestro componente. El texto que se digite sobre una caja de texto asumir\xe1 el valor de la variable ",(0,t.jsx)(a.strong,{children:"name"}),". El texto que se seleccione sobre una lista de opciones asumir\xe1 el valor de la variable ",(0,t.jsx)(a.strong,{children:"type"}),"."]}),"\n",(0,t.jsx)(a.admonition,{type:"note",children:(0,t.jsx)(a.p,{children:"Las variables locales no persisten entre renderizaciones"})}),"\n",(0,t.jsxs)(a.p,{children:["Para actualizar estos valores debemos implementar dos funciones que respondan al evento : ",(0,t.jsx)(a.strong,{children:"onChange"}),". La primera funci\xf3n : ",(0,t.jsx)(a.strong,{children:"handleChangeName"})," actualizar\xe1 el valor de la variable ",(0,t.jsx)(a.strong,{children:"name"})," haciendo uso del ",(0,t.jsx)(a.strong,{children:"setName"}),". La segunda funci\xf3n : ",(0,t.jsx)(a.strong,{children:"handleChangeType"})," actualizar\xe1 el valor de la variable ",(0,t.jsx)(a.strong,{children:"type"})," haciendo uso del ",(0,t.jsx)(a.strong,{children:"setType"}),"."]}),"\n",(0,t.jsx)(a.admonition,{type:"tip",children:(0,t.jsx)(a.p,{children:"El valor de una variable de estado nunca cambia dentro de un renderizado, incluso si el c\xf3digo de tu controlador de evento es as\xedncrono. Dentro del onClick de ese renderizado, el valor de number sigue siendo 0 incluso despu\xe9s de que se llama a setNumber(number + 5). Su valor se \u201cfij\xf3\u201d cuando React \u201ctom\xf3 la instant\xe1nea\u201d de la UI al llamar a tu componente."})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",metastring:'title="/src/CarroApp.jsx"',children:'import { useState } from \'react\';\nimport React from \'react\'\n\nexport const Carro = ({nombre, tipo}) => {\n\n  const [name, setName] = useState(nombre)\n  const [type, setType] = useState(tipo)\n\n  const handleChangeName = (event) => {\n    setName(event.target.value)\n  }\n\n  const handleChangeType = (event) => {\n    setType(event.target.value)\n  }\n  \n  return (\n    <>\n        <input type="text" value={name} onChange={handleChangeName} />\n        <select value={type} onChange={handleChangeType}>\n            <option value="CC">CC</option>\n            <option value="CE">CE</option>\n            <option value="TI">TI</option>\n        </select>\n    </>\n  )\n}\n'})})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>i});var o=n(6540);const t={},s=o.createContext(t);function r(e){const a=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:a},e.children)}}}]);